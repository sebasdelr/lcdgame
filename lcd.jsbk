var view = {
    displayMessage: function(msg) {
        var message = document.getElementById('messageArea');
        message.innerHTML = msg;
    },
    displayHit: function(location) {
        var cell = document.getElementById(location);
        cell.setAttribute("class","hit");

    },
    displayMiss: function(location) {
        var cell = document.getElementById(location);
        cell.setAttribute("class", "miss"); 
    },
    displayNothing: function(location) {
        var cell = document.getElementById(location);
        cell.setAttribute("class", ""); 
    }
};



var model = {
    boardSize : 7,
    score: 0,
    //create list of markers for shots - 3 maybe
    markerDown: "",
    markerUp: "",


    markerTrail: "",

    //colission checks if any of the shot markers are in or near enemy position
    colission: function(enemyShip) {

        if(enemyShip.shipMarker == ""){
            return false;
    
        }
        else{
            if(markerUp.toString() == enemyShip.shipMarker.toString() || previousMarkerUp.toString() == enemyShip.shipMarker.toString() || enemyShip.previousShipMarker.toString() == markerUp.toString()){
    
                return true;
            }
            return false;
        }
    
    },
    handleAmmo: function(){

    },

    moveUp: function(current, column){

        
        //markerUpBox = (current - 1) + column;
        shot = current + column;
        previousMarkerUp = (current + 1) + column;
    
        if(current == 5){
    
            view.displayMiss(shot);
    
        }
        else if(current == -1){
    
            view.displayNothing(previousMarkerUp);
    
        }
        else{
            
            view.displayNothing(previousMarkerUp);
            view.displayMiss(shot);
    
        }
    
        // need to figure out beter solution for having both movements clear graphic
    
        // if(this.colission()){
        //     enemyState = false;
    
        //     view.displayNothing(previousMarkerUp);
        //     view.displayNothing(markerDown);
        //     view.displayNothing(previousMarkerDown);
    
    
        //     console.log("display hit");
        //     score++;
        //     view.displayMessage(score);
        // }
    
    
    },

    
    shoot: function(column){

        //controller.ammo;
        controller.shotsFired;
        

        if(controller.ammo.length > 0){
            var currentShot = controller.ammo.pop();
            var currentShot = column;
            

           // console.log(controller.ammo);
            
            var x = 5;
            var intervalID = window.setInterval(function () {
        
                model.moveUp(x, currentShot);
            
                x--;
            
                if (x === -2  || !enemyState) {
                        
                        window.clearInterval(intervalID);
                
                }
            }, 337);

        }else{
            controller.reset();
        }
        
    
    
    },
    
    
    
};

//function enemyShip(marker, movement)?


var controller = {

    playerMarker : 3,
    shot1: "",
    shot2: "",
    shot3: "",
    ammo: [this.shot1, this.shot2, this.shot3],
    shotsFired: [],
    reset: function(){
        console.log("reset");
        this.shot1 = "";
        this.shot2 = "";
        this.shot3 = "";
        this.ammo = [this.shot1, this.shot2, this.shot3];
    },

    
};

function enemyShip(){
    this.shipMarker = "";
    this.previousShipMarker = "";
    this.enemyState = true;
}

enemyShip.prototype.moveDown = function(current, column){

    this.shipMarker = current + column;
    this.previousShipMarker = (current - 1) + column;

    if(current == 0){

        view.displayHit(this.shipMarker);

    }
    else if(current == 6){

        view.displayNothing(this.previousShipMarker);

    }
    else{
                 
        view.displayNothing(this.previousShipMarker);
        view.displayHit(this.shipMarker);

    }

    //colission method should be able to take any enemy and shot
    if(model.colission(this)){
        enemyState = false;

        //view.displayNothing(this.previousMarkerUp);
        view.displayNothing(this.shipMarker);
        view.displayNothing(this.previousShipMarker);

        console.log("display hit");
        score++;
        view.displayMessage(score);
    }

}

enemyShip.prototype.enemyMove = function(startPoint){

    setInterval(function(){
        this.enemyState = true;

        var x = 0;
        var intervalID = window.setInterval(function () {

            enemyShip.prototype.moveDown(x, startPoint);

            x++;

            if (x === 7 || !this.enemyState) {
    
                window.clearInterval(intervalID);

            }
        }, 997);

    }, 7000);
}





// function enemyMove(){

//     setInterval(function(){
//         enemyState = true;

//         var x = 0;
//         var intervalID = window.setInterval(function () {

//             moveDown(x, "0");

//             x++;

//             if (x === 7 || !enemyState) {


                
//                 window.clearInterval(intervalID);

//             }
//         }, 997);

//     }, 7000);
// }

// function moveDown(current, column){

//     markerDown = current + column;
//     previousMarkerDown = (current - 1) + column;

//     if(current == 0){

//         view.displayHit(markerDown);


//     }
//     else if(current == 6){

//         view.displayNothing(previousMarkerDown);

//     }
//     else{
            
       
//         view.displayNothing(previousMarkerDown);
//         view.displayHit(markerDown);

//     }

    
//     if(colission()){
//         enemyState = false;

//         view.displayNothing(previousMarkerUp);
//         view.displayNothing(markerDown);
//         view.displayNothing(previousMarkerDown);


//         console.log("display hit");
//         score++;
//         view.displayMessage(score);
//     }
  


// }



// // shot should run collission detection on each "frame" - check if enemies are on path. Maybe run an array to check for all current enemy placements.



// function shoot(column){


//     console.log("shoot");
    
//     var x = 5;
//     var intervalID = window.setInterval(function () {

//        moveUp(x, column);

//        x--;

//        if (x === -2  || !enemyState) {
            
//             window.clearInterval(intervalID);
    
//        }
//     }, 337);


// }

// function moveUp(current, column){
    
//     //markerUpBox = (current - 1) + column;
//     markerUp = current + column;
//     previousMarkerUp = (current + 1) + column;

//     if(current == 5){

//         view.displayMiss(markerUp);

//     }
//     else if(current == -1){

//         view.displayNothing(previousMarkerUp);

//     }
//     else{
        
//         view.displayNothing(previousMarkerUp);
//         view.displayMiss(markerUp);

//     }

//     // need to figure out beter solution for having both movements clear graphic

//     if(colission()){
//         enemyState = false;

//         view.displayNothing(previousMarkerUp);
//         view.displayNothing(markerDown);
//         view.displayNothing(previousMarkerDown);


//         console.log("display hit");
//         score++;
//         view.displayMessage(score);
//     }


// }

var moveLeft = function(){

    if(controller.playerMarker == 0){

    }
    else{
        previousMarker = controller.playerMarker;
        controller.playerMarker = controller.playerMarker -1;

        view.displayNothing("6" + previousMarker);
        view.displayMiss("6"+ controller.playerMarker);

    }
}

var moveRight = function(){

    if(controller.playerMarker == 6){

    }
    else{
        previousMarker = controller.playerMarker;
        controller.playerMarker = controller.playerMarker +1;


        view.displayNothing("6" + previousMarker);
        view.displayMiss("6"+ controller.playerMarker);

    }
    

}

function handleKeyPress(e) {

    if (e.keyCode === 37) {

        moveLeft();
    }
    else if(e.keyCode === 39){

        moveRight();

    }
    else if(e.keyCode === 65) {

        model.shoot(controller.playerMarker.toString());
     

    }
}

function colission() {

    if(markerDown == ""){
        return false;

    }
    else{
        if(markerUp.toString() == markerDown.toString() || previousMarkerUp.toString() == markerDown.toString() || previousMarkerDown.toString() == markerUp.toString()){


            
            return true;
        }
        return false;
    }

}



function init() {

    //markerUpBox = "";
    markerDown = "";
    markerUp = "";
    previousMarkerDown = "";
    previousMarkerUp = "";
    score = 0;


    var enemy1 = new enemyShip();
    var enemy2 = new enemyShip();
    

    enemyState = true;

    //enemyMove();
    enemy1.enemyMove("3");
    enemy2.enemyMove("4");

    view.displayMiss("63");

    document.addEventListener("keydown", handleKeyPress);

}

window.onload = init;

